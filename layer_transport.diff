diff --git a/quantum/split_common/transport.c b/quantum/split_common/transport.c
index 467ff81a9..a05079c38 100644
--- a/quantum/split_common/transport.c
+++ b/quantum/split_common/transport.c
@@ -28,6 +28,7 @@ static pin_t encoders_pad[] = ENCODERS_PAD_A;
 
 typedef struct _I2C_slave_buffer_t {
     matrix_row_t smatrix[ROWS_PER_HAND];
+    uint8_t      current_layer;
     uint8_t      backlight_level;
 #    if defined(RGBLIGHT_ENABLE) && defined(RGBLIGHT_SPLIT)
     rgblight_syncinfo_t rgblight_sync;
@@ -42,9 +43,10 @@ typedef struct _I2C_slave_buffer_t {
 
 static I2C_slave_buffer_t *const i2c_buffer = (I2C_slave_buffer_t *)i2c_slave_reg;
 
+#    define I2C_KEYMAP_START offsetof(I2C_slave_buffer_t, smatrix)
+#    define I2C_LAYER_START offsetof(I2C_slave_buffer_t, current_layer)
 #    define I2C_BACKLIGHT_START offsetof(I2C_slave_buffer_t, backlight_level)
 #    define I2C_RGB_START offsetof(I2C_slave_buffer_t, rgblight_sync)
-#    define I2C_KEYMAP_START offsetof(I2C_slave_buffer_t, smatrix)
 #    define I2C_ENCODER_START offsetof(I2C_slave_buffer_t, encoder_state)
 #    define I2C_WPM_START offsetof(I2C_slave_buffer_t, current_wpm)
 
@@ -58,6 +60,13 @@ static I2C_slave_buffer_t *const i2c_buffer = (I2C_slave_buffer_t *)i2c_slave_re
 bool transport_master(matrix_row_t matrix[]) {
     i2c_readReg(SLAVE_I2C_ADDRESS, I2C_KEYMAP_START, (void *)matrix, sizeof(i2c_buffer->smatrix), TIMEOUT);
 
+    uint8_t current_layer = layer_state;
+    if (current_layer != i2c_buffer->current_layer) {
+        if (i2c_writeReg(SLAVE_I2C_ADDRESS, I2C_LAYER_START, (void *)&current_layer, sizeof(current_layer), TIMEOUT) >= 0) {
+            i2c_buffer->current_layer = current_layer;
+        }
+    }
+
     // write backlight info
 #    ifdef BACKLIGHT_ENABLE
     uint8_t level = is_backlight_enabled() ? get_backlight_level() : 0;
@@ -98,7 +107,9 @@ void transport_slave(matrix_row_t matrix[]) {
     // Copy matrix to I2C buffer
     memcpy((void *)i2c_buffer->smatrix, (void *)matrix, sizeof(i2c_buffer->smatrix));
 
-// Read Backlight Info
+    layer_state_set(i2c_buffer->current_layer);
+
+    // Read Backlight Info
 #    ifdef BACKLIGHT_ENABLE
     backlight_set(i2c_buffer->backlight_level);
 #    endif
@@ -139,6 +150,7 @@ typedef struct _Serial_s2m_buffer_t {
 } Serial_s2m_buffer_t;
 
 typedef struct _Serial_m2s_buffer_t {
+    uint8_t current_layer;
 #    ifdef BACKLIGHT_ENABLE
     uint8_t backlight_level;
 #    endif
@@ -238,6 +250,8 @@ bool transport_master(matrix_row_t matrix[]) {
         matrix[i] = serial_s2m_buffer.smatrix[i];
     }
 
+    serial_m2s_buffer.current_layer = layer_state;
+
 #    ifdef BACKLIGHT_ENABLE
     // Write backlight level for slave to read
     serial_m2s_buffer.backlight_level = is_backlight_enabled() ? get_backlight_level() : 0;
@@ -256,10 +270,14 @@ bool transport_master(matrix_row_t matrix[]) {
 
 void transport_slave(matrix_row_t matrix[]) {
     transport_rgblight_slave();
+
     // TODO: if MATRIX_COLS > 8 change to pack()
     for (int i = 0; i < ROWS_PER_HAND; ++i) {
         serial_s2m_buffer.smatrix[i] = matrix[i];
     }
+
+    layer_state_set(serial_m2s_buffer.current_layer);
+
 #    ifdef BACKLIGHT_ENABLE
     backlight_set(serial_m2s_buffer.backlight_level);
 #    endif
